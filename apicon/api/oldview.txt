from api.models import Sites,Company,Supplier,UserProfile,SalaryRegister,LeaveRegister
from django.contrib.auth.models import User, Group,Permission,AbstractUser
from rest_framework import serializers
from .serilizer import SiteSerilizer,CompanySerilizer,UserSerilizer,GroupSerializer,SupplierSerilizer,SalaryRegisterSerilizer,LeaveRegisterSerializer
from rest_framework.response import Response
from rest_framework.decorators import api_view, authentication_classes,permission_classes
from rest_framework.permissions import IsAuthenticated,AllowAny
from rest_framework import status
from rest_framework import viewsets
from django.shortcuts import get_object_or_404
from rest_framework import permissions
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from rest_framework.authentication import SessionAuthentication, BasicAuthentication,TokenAuthentication
from django.views.decorators.csrf import csrf_exempt
import json




    
#-----------------------------user data and login--------------------------------------------
class UserLogIn(ObtainAuthToken):
    permission_classes=[AllowAny]
    def post(self, request, *args, **kwargs):
        
        serializer = self.serializer_class(data=request.data,context={'request': request})
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        user2 = User.objects.get(pk=user.pk)
        token = Token.objects.get(user=user)
        pic=UserProfile.objects.get(user=user)
        if user2.is_superuser :
            codenames = Permission.objects.values_list('codename', flat=True)
        else:
            codenames = user2.user_permissions.values_list('codename', flat=True)
       
        return Response({
            'token': token.key,
            'id': user.pk,
            'username': user.username,
            'firstname':user.first_name,
            'pic':pic.profile_picture.url,
            'codename': codenames
        })
    
@api_view(['GET'])
@authentication_classes([TokenAuthentication])
@permission_classes([IsAuthenticated])
def get_permissions(request,userid):
    user = User.objects.get(pk=userid)
    codenames = user.user_permissions.values_list('codename', flat=True)
    codenames_list = list(codenames)
    codenames_json = json.dumps(codenames_list)
    
    return Response({'codenames': codenames_list})


class UserViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows users to be viewed or edited.
    """
    queryset = User.objects.all().order_by('-date_joined')
    serializer_class = UserSerilizer
    permission_classes = [permissions.IsAuthenticated]
   
class GroupViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows groups to be viewed or edited.
    """
    queryset = Group.objects.all()
    serializer_class = GroupSerializer
    permission_classes = [permissions.IsAuthenticated]

# -----------------company-------------------------------------
class CompanyViewSet(viewsets.ModelViewSet):
    queryset=Company.objects.all()  
    serializer_class=CompanySerilizer
    permission_classes=[IsAuthenticated]
    authentication_classes=[TokenAuthentication]

# @api_view(['GET','POST',])
# @authentication_classes([TokenAuthentication])
# @permission_classes([IsAuthenticated])
# def get_companys(request):
#     if request.method =='GET':
#         comp = Company.objects.all()
#         data = CompanySerilizer(comp, many=True).data
#         return Response(data)
#     elif request.method =='POST':
#         data=request.data
#         print(data)
#         serilizer = CompanySerilizer(data=data)
#         if serilizer.is_valid():
#             serilizer.save()
#            #return Response(serilizer.data)
#             print(serilizer.errors)
#             return Response(serilizer.data, status=status.HTTP_201_CREATED)
#         return Response(serilizer.errors, status=status.HTTP_400_BAD_REQUEST)
   
    
    
# @api_view(['GET','DELETE','PATCH','PUT',])   
# @authentication_classes([TokenAuthentication])
# @permission_classes([IsAuthenticated])
# def get_company(request,id):
#     if request.method =='GET' :
#         comp = Company.objects.get(comp_id=id)
#         data = CompanySerilizer(comp).data
#         return Response(data) 

#     if request.method =='DELETE' :
#         comp = Company.objects.get(comp_id=id)
#         comp.delete()
#         data={'data':'data deleted'}
#         return Response(data)  
    
#     if request.method =='PUT' :
#         data2=request.data
#         comp = Company.objects.get(comp_id=id)
#         serilizer = CompanySerilizer(comp,data=data2)
#         if serilizer.is_valid():
#             serilizer.save()
#             data={'data':'data updated'}
#             return Response(data) 
#         else:
#             error={'error':'data is not valid please fill all detail updated'}
#             return Response(error) 
# -----------------site-------------------------------------
    
class SiteViewSet(viewsets.ModelViewSet):
    queryset=Sites.objects.all()  
    serializer_class=SiteSerilizer
    permission_classes=[IsAuthenticated]
    authentication_classes=[TokenAuthentication]

    
# @api_view(['GET','POST'])
# @authentication_classes([TokenAuthentication])
# @permission_classes([IsAuthenticated])
# def get_sites(request):
    
#     if request.method =='GET':
#         filter = request.GET.get('filter')
        
#         if filter=='all':
#              site = Sites.objects.all()
#         else:
#             site = Sites.objects.filter(Isactive=1).all()
#         data = SiteSerilizer(site, many=True).data
#         #print(data)
#         return Response(data)
#     elif request.method =='POST': 
#         data=request.data
#         #print(data)
#         serilizer = SiteSerilizer(data=data)
#         #print(serilizer)
        
           
#         if serilizer.is_valid():
#             serilizer.save()
           
            
#             return Response(serilizer.errors, status=status.HTTP_201_CREATED)
#         print(serilizer.errors)
#         return Response(serilizer.errors, status=status.HTTP_400_BAD_REQUEST)

# @api_view(['GET','DELETE','PATCH','PUT',])   
# @authentication_classes([ TokenAuthentication])
# @permission_classes([IsAuthenticated])
# def get_site(request,id):
#     if request.method =='GET' :
#         site = Sites.objects.get(site_id=id)
#         data = SiteSerilizer(site).data
#         print (data)
#         return Response(data) 
    
#     if request.method =='DELETE' :
#         site = Sites.objects.get(site_id=id)
#         site.delete()
#         data={'data':'data deleted'}
#         return Response(data) 

#     if request.method =='PUT' :
#         data2=request.data
#         site = Sites.objects.get(site_id=id)
#         serilizer = SiteSerilizer(site,data=data2)
#         if serilizer.is_valid():
#             serilizer.save()
#             data={'data':'data updated'}
#             return Response(data) 
#         else:
#             error={'error':'data is not valid please fill all detail updated'}
#             return Response(error) 
        
# -----------------entity-------------------------------------
    

class SupplierViewSet(viewsets.ModelViewSet):
    queryset=Supplier.objects.all()  
    serializer_class=SupplierSerilizer
    permission_classes=[IsAuthenticated]
    authentication_classes=[TokenAuthentication]

    def list(self, request):
        filter_value = request.GET.get('filter2')
        if filter_value is None or filter_value == '':
            queryset = self.queryset.all()
        else:
            queryset = self.queryset.filter(types=filter_value)
        
        serializer = self.serializer_class(queryset, many=True)
        return Response(serializer.data)
    
    def create(self, request):
        serializer = self.serializer_class(data=request.data)
        if serializer.is_valid():
            instance = serializer.save()
            adharphoto_file = request.data.get('adharphoto', None)
            photo_file = request.data.get('photo', None)
            if adharphoto_file and not isinstance(adharphoto_file, str):
                instance.adharphoto.save(adharphoto_file.name, adharphoto_file)
            if photo_file and not isinstance(photo_file, str):
                instance.photo.save(photo_file.name, photo_file)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    def update(self, request, pk=None):
        instance = self.get_object()
        serializer = self.serializer_class(instance, data=request.data, partial=True)
        if serializer.is_valid():
            instance = serializer.save()
            adharphoto_file = request.data.get('adharphoto', None)
            photo_file = request.data.get('photo', None)
            if adharphoto_file and not isinstance(adharphoto_file, str):
                instance.adharphoto.save(adharphoto_file.name, adharphoto_file)
            if photo_file and not isinstance(photo_file, str):
                instance.photo.save(photo_file.name, photo_file)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) 
    
    def retrieve(self, request, pk=None):
        instance = self.get_object()
        serializer = self.serializer_class(instance)
        return Response(serializer.data)
# @api_view(['GET','POST'])
# @authentication_classes([TokenAuthentication])
# @permission_classes([IsAuthenticated])
# def get_entities(request):
    
#     if request.method =='GET':
#         filter_value = request.GET.get('filter2')
#         #print(filter_value)
#         if filter_value is None or  filter_value == '':
#             sup = Supplier.objects.all()
#         else :
#             sup = Supplier.objects.filter(types=filter_value).all()
        
#         #print("Before serialization:", sup)
        
#         data = SupplierSerilizer(sup, many=True).data
#         #print("Serialized data:", data)
#         return Response(data)
#     elif request.method =='POST': 
#         data=request.data
#         adharphoto_file = data.get('adharphoto', None)
#         photo_file = data.get('photo', None)

#         data=request.data.copy()
#         data.pop('adharphoto',None)
#         data.pop('photo',None)
#         serilizer = SupplierSerilizer(data=data)
#         # if not serilizer.is_valid:
#         #     # print(serilizer.error_messages)
#         if serilizer.is_valid():
#             employee_instance =serilizer.save()
#             if adharphoto_file and not isinstance(adharphoto_file,str):
#                 employee_instance.adharphoto.save(adharphoto_file.name, adharphoto_file)
#             if photo_file and not isinstance(photo_file,str):
#                 employee_instance.photo.save(photo_file.name, photo_file)
          
#             return Response(serilizer.data, status=status.HTTP_201_CREATED)
#         return Response(serilizer.errors, status=status.HTTP_400_BAD_REQUEST)

# @api_view(['GET','DELETE','PATCH','PUT',])   
# @authentication_classes([ TokenAuthentication])
# @permission_classes([IsAuthenticated])
# def get_entity(request,id):
#     if request.method =='GET' :
#         sup = Supplier.objects.get(sup_id=id)
#         data = SupplierSerilizer(sup).data
#         return Response(data)  
    
#     if request.method =='DELETE' :
#         sup = Supplier.objects.get(sup_id=id)
#         print(sup)
#         sup.delete()
#         data={'data':'data deleted'}
#         return Response(data) 

#     if request.method =='PUT' :
        
#         data=request.data
#         print('request data',data)
       
#         adharphoto_file = data.get('adharphoto', None)
#         photo_file = data.get('photo', None)

#         data=request.data.copy()

#         data.pop('adharphoto',None)
#         data.pop('photo',None)
        
#         supExist = Supplier.objects.get(sup_id=id)
        
        
#         supplier_serilizer = SupplierSerilizer(supExist,data=data, partial=True)
       
        
#         if supplier_serilizer.is_valid():
#             # print('Adharphoto Filename:', adharphoto_file.name)
#             employee_instance =supplier_serilizer.save()
#             if adharphoto_file and not isinstance(adharphoto_file,str):
#                 employee_instance.adharphoto.save(adharphoto_file.name, adharphoto_file)
#             if photo_file and not isinstance(photo_file,str):
#                 employee_instance.photo.save(photo_file.name, photo_file)
#             data={'msg':'data updated'}
#             return Response(supplier_serilizer.data, status=status.HTTP_201_CREATED)
#         return Response(supplier_serilizer.errors, status=status.HTTP_400_BAD_REQUEST)
        
    
# def upload_file(self, data):
#         file_upload_view = self.FileUploadView.as_view()
#         request = self.request._clone()
#         request.data = data
#         response = file_upload_view(request)
#         return response
#+++++++++++++++++++++++++++++salary register+++++++++++++++++++++++++++

class SalaryRegisterViewSet(viewsets.ModelViewSet):
    queryset=SalaryRegister.objects.filter(deleted=0).all() 
    serializer_class=SalaryRegisterSerilizer
    permission_classes=[IsAuthenticated]
    authentication_classes=[TokenAuthentication]
# @api_view(['GET','POST'])
# @authentication_classes([TokenAuthentication])
# @permission_classes([IsAuthenticated])
# def get_salary_registers(request):
    
#     if request.method =='GET':
#         slry = SalaryRegister.objects.filter(deleted=0).all()
#         data = SalaryRegisterSerilizer(slry, many=True).data
#         #print(data)
#         return Response(data)
#     elif request.method =='POST': 
#         data=request.data
#         serilizer = SiteSerilizer(data=data)
#         if serilizer.is_valid():
#             serilizer.save()
#            #return Response(serilizer.data)
#             print(serilizer.errors)
#             return Response(serilizer.data, status=status.HTTP_201_CREATED)
#         return Response(serilizer.errors, status=status.HTTP_400_BAD_REQUEST)
    
# @api_view(['GET','DELETE','PATCH','PUT',])   
# @authentication_classes([ TokenAuthentication])
# @permission_classes([IsAuthenticated])
# def get_salary_register(request,id):
#     if request.method =='GET' :
#         slr = SalaryRegister.objects.get(sal_id=id)
#         data = SalaryRegisterSerilizer(slr).data
#         #print (data)
#         return Response(data) 
    
#     if request.method =='DELETE' :
#         slr = SalaryRegister.objects.get(sal_id=id)
#         slr.delete()
#         data={'data':'data deleted'}
#         return Response(data) 

#     if request.method =='PUT' :
#         data2=request.data
#         site = Sites.objects.get(site_id=id)
#         serilizer = SiteSerilizer(site,data=data2)
#         if serilizer.is_valid():
#             serilizer.save()
#             data={'data':'data updated'}
#             return Response(data) 
#         else:
#             error={'error':'data is not valid please fill all detail updated'}
#             return Response(error) 



class LeaveRegisterViewSet(viewsets.ModelViewSet):
    queryset=LeaveRegister.objects.all().order_by('-ddate')
    serializer_class=LeaveRegisterSerializer
    permission_classes= [permissions.IsAuthenticated]
    authentication_classes=[TokenAuthentication]



